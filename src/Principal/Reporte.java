/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import BD.BD;
import javax.swing.table.DefaultTableModel;
import com.toedter.calendar.JDateChooser;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

public final class Reporte extends javax.swing.JFrame {

    public static int id;
    static DefaultTableModel t = new DefaultTableModel();
    public static boolean EXIST = false;
    String fechaInicio = "";
    String fechaFin = "";
    String Grupo = "";
    String practica = "";
    Object ID = "";
    int ban = 0;
    int val;

    /**
     * Creates new form NewJFrame
     */
    public Reporte() {
        initComponents();
        t = (DefaultTableModel) jtbTabla.getModel();
        Calendar f = Calendar.getInstance();
        JChoserfechaInicio.getDateEditor().setEnabled(false);
        JChoserfechaFin.getDateEditor().setEnabled(false);
        inicio();

    }

    public Reporte(int id) {
        Reporte.id = id;
        initComponents();
        t = (DefaultTableModel) jtbTabla.getModel();
        Calendar f = Calendar.getInstance();
        JChoserfechaInicio.getDateEditor().setEnabled(false);
        JChoserfechaFin.getDateEditor().setEnabled(false);
        inicio();
    }

    /*
            FUNCIÓN QUE CREA EL ICONO DE LA APLICACION
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Imagen/icono.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelImage1 = new org.edisoncor.gui.panel.PanelImage();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jcPracticas = new javax.swing.JComboBox<>();
        btnObtenerRegistros = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        JChoserfechaInicio = new com.toedter.calendar.JDateChooser();
        btnCerrar = new javax.swing.JButton();
        JChoserfechaFin = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JcGrupos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbTabla = new javax.swing.JTable();
        jcSemestre = new javax.swing.JComboBox<>();
        JcCarrera = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        panelImage1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/ReportesFondo.png"))); // NOI18N

        javax.swing.GroupLayout panelImage1Layout = new javax.swing.GroupLayout(panelImage1);
        panelImage1.setLayout(panelImage1Layout);
        panelImage1Layout.setHorizontalGroup(
            panelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1500, Short.MAX_VALUE)
        );
        panelImage1Layout.setVerticalGroup(
            panelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Elige el semestre");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/Talwayseb - Excel 2007.png"))); // NOI18N
        jButton1.setText("Exportar a Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jcPracticas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige una práctica" }));

        btnObtenerRegistros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/accept.png"))); // NOI18N
        btnObtenerRegistros.setText("Obtener Registros");
        btnObtenerRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObtenerRegistrosActionPerformed(evt);
            }
        });
        btnObtenerRegistros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnObtenerRegistrosKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Elige el Periodo del parcial ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Elige el Grupo");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORTES DE PRÁCTICAS");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Elige la práctica");

        JChoserfechaInicio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JChoserfechaInicioPropertyChange(evt);
            }
        });

        btnCerrar.setBackground(new java.awt.Color(255, 0, 0));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/cancel.png"))); // NOI18N
        btnCerrar.setText("REGRESAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        JChoserfechaFin.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                JChoserfechaFinPropertyChange(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/LogoEnfermeria.png"))); // NOI18N

        jLabel2.setBackground(new java.awt.Color(255, 51, 51));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Fecha Inicio");

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagen/logoUnsis.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Fecha Fin");

        JcGrupos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige un grupo" }));

        jtbTabla.setForeground(new java.awt.Color(102, 0, 0));
        jtbTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N.P", "Matrícula", "Nombre", "Práctica", "Entrada", "Salida", "Sustituye", "Grupo", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbTabla.setGridColor(new java.awt.Color(0, 0, 0));
        jtbTabla.setSelectionBackground(new java.awt.Color(153, 204, 255));
        jtbTabla.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jtbTabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtbTabla);

        jcSemestre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige el semestre" }));
        jcSemestre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcSemestreItemStateChanged(evt);
            }
        });

        JcCarrera.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elige la carrera", "Enfermería ", "Medicina", "Odontología" }));
        JcCarrera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JcCarreraItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Elige la carrera");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JChoserfechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JChoserfechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JcCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(JcGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(jcPracticas, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(103, 103, 103))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(37, 37, 37)
                                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addComponent(btnObtenerRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(100, 100, 100))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelImage1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5))
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JChoserfechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JChoserfechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcPracticas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JcGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JcCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnObtenerRegistros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCerrar)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        MenuPrincipal menu = new MenuPrincipal(id);
        menu.show();
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // genera el xls
        GeneraXls();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnObtenerRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObtenerRegistrosActionPerformed
        try {
            // TODO add your handling code here:
            cargaDatos();
        } catch (SQLException ex) {
            Logger.getLogger(Reporte.class.getName()).log(Level.SEVERE, null, ex);
        }
        // si la variable EXIST es "falso" quiere decir que no se encontraron registros
        if (!EXIST) {
            JOptionPane.showMessageDialog(null, "No se encontraron registros");
        }
        // le asigno false a la variable para cuando quiera realizar otra consulta tenga el mismo funcionamiento
        EXIST = false;
    }//GEN-LAST:event_btnObtenerRegistrosActionPerformed

    private void btnObtenerRegistrosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnObtenerRegistrosKeyReleased

    }//GEN-LAST:event_btnObtenerRegistrosKeyReleased

    private void JChoserfechaInicioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JChoserfechaInicioPropertyChange

    }//GEN-LAST:event_JChoserfechaInicioPropertyChange

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        int bandera = 1;
        bandera = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea salir?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (bandera == 0) {
            // TODO add your handling code here:
            MenuPrincipal menu = new MenuPrincipal(id);
            menu.show();
            this.dispose();
        }
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void JChoserfechaFinPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_JChoserfechaFinPropertyChange

    }//GEN-LAST:event_JChoserfechaFinPropertyChange

    private void jcSemestreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcSemestreItemStateChanged
        cargarGrupos();
        cargarPracticas();
    }//GEN-LAST:event_jcSemestreItemStateChanged

    private void JcCarreraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JcCarreraItemStateChanged
        if (JcCarrera.getSelectedIndex() != 0) {
            cargarSemestres();
        } else {
            JOptionPane.showMessageDialog(null, "¡Advertencia!", "Elige una carrera válida", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_JcCarreraItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reporte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser JChoserfechaFin;
    private com.toedter.calendar.JDateChooser JChoserfechaInicio;
    private javax.swing.JComboBox<String> JcCarrera;
    private javax.swing.JComboBox<String> JcGrupos;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnObtenerRegistros;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcPracticas;
    private javax.swing.JComboBox<String> jcSemestre;
    private javax.swing.JTable jtbTabla;
    private org.edisoncor.gui.panel.PanelImage panelImage1;
    // End of variables declaration//GEN-END:variables

// función que solo llama a los métodos LimpiaTabla(),cargarSemestres()
    public void inicio() {
        LimpiaTabla();
    }

// limpia la tabla
    public static void LimpiaTabla() {
        int a = t.getRowCount();

        while (a != 0) { // Ciclo para Borrar la Tabla 1
            if (a != 0) {
                t.removeRow(0);
            }
            a = t.getRowCount();
        }
    }

    /* método para sacar que grupos estan registrados en la base de datos, para que cuando se haga un reporte
    el usuario eliga valores validos del grupo
     */
    public void cargarGrupos() {
        try {
            BD bd = new BD();
            //consulta que se va a realizar
            String query = "call spObtenerGrupos('" + jcSemestre.getSelectedItem() + "','" + obtenerCarrera(JcCarrera.getSelectedIndex()) + "')";
            Statement stm = bd.conecta().createStatement();
            ResultSet r = stm.executeQuery(query);
            //  recorremos el resulset para sacar los datos obtenidos de la consulta
            JcGrupos.removeAllItems();
            JcGrupos.addItem("Elige un grupo");
            while (r.next()) {
                // Los agregamos a un jcomboBox
                JcGrupos.addItem(r.getString("grupo"));
            }
            bd.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERROR", "Hubo un error cargando grupos", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * metodo que carga los semestres que hay en la base de datos 
     * y los almacena en un combobox
     */
    public void cargarSemestres() {
        try {
            BD bd = new BD();
            String query = "call spObtenerSemestres()";
            Statement stm = bd.conecta().createStatement();
            ResultSet r = stm.executeQuery(query);
            // Remueve todos los items que tenga semestre cuando se cambie de carrera.
            jcSemestre.removeAllItems();
            // Agrega la opción Elige un semestre antes de llamar el método cargarSemestres().
            jcSemestre.addItem("Elige el semestre");
            //  recorremos el resulset para sacar los datos obtenidos de la consulta
            while (r.next()) {
                // Los agregamos a un jcomboBox
                jcSemestre.addItem(r.getString("nombre"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERROR", "Hubo un error cargando Semestres", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * carga las practicas existenes en un combobox
     */
    public void cargarPracticas() {
        try {
            BD bd = new BD();
            //consulta
                   String query = "call spMostrarPracticaPorNombreSemestre('" + jcSemestre.getSelectedItem() + "','" + obtenerCarrera(JcCarrera.getSelectedIndex()) + "')";
            Statement stm = bd.conecta().createStatement();
            ResultSet r=stm.executeQuery(query);
            //  recorremos el resulset para sacar los datos obtenidos de la consulta
            jcPracticas.removeAllItems();
            jcPracticas.addItem("Elige una práctica");
            while (r.next()) {
                // Los agregamos a un jcomboBox
                jcPracticas.addItem(r.getString("nombre"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "ERROR", "Hubo un error cargando Practicas", JOptionPane.ERROR_MESSAGE);

        }
    }

//Bloque de código para obtener la carrera.
    public String obtenerCarrera(int carrera) {
        String codigoC = "";
        switch (carrera) {
            case 1:
                codigoC = "03";
                break;
            case 2:
                codigoC = "13";
                break;
            case 3:
                codigoC = "14";
                break;

        }
        return codigoC;
    }

    // bloque donde se realiza la consulta y la llena en una tabla
    public void cargaDatos() throws SQLException {
        LimpiaTabla();
        // arreglo de objetos para almacenar una fila de datos que nos devuelva la consulta para después agregar ese arreglo a la tabla
        Object[] ob = new Object[11];
        Grupo = (String) JcGrupos.getSelectedItem();
        fechaInicio = formatoFecha(JChoserfechaInicio);
        fechaFin = formatoFecha(JChoserfechaFin);
        practica = (String) jcPracticas.getSelectedItem();
        // j es una variable que nos servirá para mostrar el número progresivo
        int j = 1;
        if ("".equals(fechaInicio) || "".equals(fechaFin)) {
            JOptionPane.showMessageDialog(null, "Campos vacíos o no válidos, por favor verifica la sección de fechas. ", "¡ERROR!", JOptionPane.ERROR_MESSAGE);
        } else if (("Elige la carrera".equals((String) JcCarrera.getSelectedItem()))) {
            JOptionPane.showMessageDialog(null, "Elige una carrera válida. ", "¡ERROR!", JOptionPane.ERROR_MESSAGE);
        } else if (("Elige el semestre".equals((String) jcSemestre.getSelectedItem()))) {
            JOptionPane.showMessageDialog(null, "Elige un semestre válido. ", "¡ERROR!", JOptionPane.ERROR_MESSAGE);
        } else if ("Elige un grupo".equals(Grupo)) {
            JOptionPane.showMessageDialog(null, "Por favor elige un grupo. ", "¡ERROR!", JOptionPane.ERROR_MESSAGE);
        } else if ("Elige una práctica".equals(practica)) {
            JOptionPane.showMessageDialog(null, "Por favor elige una práctica. ", "¡ERROR!", JOptionPane.ERROR_MESSAGE);
        } else {
            BD bd = new BD();
            // consulta 
            String query = "call spMostrarReporte('" + Grupo + "','" + fechaInicio + "','" + fechaFin + "','" + practica + "')";
            Statement stm = bd.conecta().createStatement();
            ResultSet r = stm.executeQuery(query);
            try {
                while (r.next()) {
                    EXIST = true; // para después verificar si existen datos para poder generar el reporte
                    ob[0] = j;
                    ob[1] = r.getObject("Matricula");
                    ob[2] = r.getObject("Nombre");
                    ob[3] = r.getObject("Practica");
                    ob[4] = r.getObject("HoraEntrada");
                    ob[5] = r.getObject("HoraSalida");
                    ob[6] = r.getObject("Sustituye");
                    ob[7] = r.getObject("Grupo");
                    ob[8] = r.getObject("Fecha");
                    t.addRow(ob);
                    j++;
                }
            } catch (SQLException e) {
                System.err.println(e.getMessage() + "\n Error\n" + query);
            }
            // agrega los datos a la tabla (jTable)
            jtbTabla.setModel(t);
            JOptionPane.showMessageDialog(null, "La consulta fue realizada");
        } // fin del else 
    }
// Bloque que genera el documento en excel de los reportes

    public void GeneraXls() {
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        java.io.OutputStream out;
        java.io.File file;

        if (jtbTabla.getRowCount() > 0) {
            try {
                if (fc.showSaveDialog(Reporte.this) == javax.swing.JFileChooser.APPROVE_OPTION) {
                    file = fc.getSelectedFile();
                    out = new java.io.FileOutputStream(file.getAbsolutePath() + ".xls");
                    HSSFWorkbook libro = new HSSFWorkbook();
                    HSSFSheet hoja = libro.createSheet("Practicas");
                    HSSFRow registro;
                    String[] titulos = {"N.P", "Matricula", "Nombre",
                        "Practica", "Entrada", "Salida", "Sustituye", "Grupo", "Fecha"};
                    //  HSSFRow fila = hoja.createRow(0);

                    javax.swing.table.DefaultTableModel tm = (javax.swing.table.DefaultTableModel) jtbTabla.getModel();
                    registro = hoja.createRow(1);
                    //sheet.addMergedRegion(rowFrom,rowTo,colFrom,colTo);
                    hoja.addMergedRegion(new CellRangeAddress(1, 1, 1, 6));
                    hoja.addMergedRegion(new CellRangeAddress(2, 2, 1, 6));
                    hoja.addMergedRegion(new CellRangeAddress(3, 3, 1, 6));
                    hoja.addMergedRegion(new CellRangeAddress(4, 4, 1, 6));
                    hoja.addMergedRegion(new CellRangeAddress(5, 5, 1, 6));
                    registro.createCell((short) 1).setCellValue("            " + "UNIVERSIDAD DE LA SIERRA SUR ");
                    HSSFCellStyle cellStyle = registro.getSheet().getWorkbook().createCellStyle();
                    registro = hoja.createRow(2);
                    registro.createCell((short) 1).setCellValue("    " + " DEPARTAMENTO DE SERVICIOS ESCOLARES  ");
                    registro = hoja.createRow(3);
                    registro.createCell((short) 1).setCellValue("                     " + "CLINICA ROBOTIZADA");
                    registro = hoja.createRow(4);
                    registro.createCell((short) 1).setCellValue("                    " + "LISTA DE ASISTENCIA");
                    registro = hoja.createRow(5);
                    registro = hoja.createRow(6);

                    for (int i = 0; i < 9; i++) {
                        registro.createCell((short) i).setCellValue(titulos[i]);
                    }

                    registro = hoja.createRow(10);
                    /*for (int i=0 ; i<tm.getColumnCount() ; i++) {
                    registro.createCell((short)i).setCellValue(tm.getColumnName(i));
                }  
                     */
                    for (int i = 0; i < tm.getRowCount(); i++) {
                        registro = hoja.createRow(i + 7);
                        for (int j = 0; j < (tm.getColumnCount()); j++) {
                            Object v1 = tm.getValueAt(i, j);
                            if (v1 == null) {
                                v1 = " ";
                            }
                            registro.createCell((short) j).setCellValue("" + v1);
                        }
                    }
                    try {
                        libro.write(out);
                        if (out != null) {
                            javax.swing.JOptionPane.showConfirmDialog(null, "Archivo creado", " ", javax.swing.JOptionPane.CLOSED_OPTION);
                        }
                    } catch (java.io.IOException ex) {
                    }
                } else {
                }
            } catch (FileNotFoundException ex) {
                //Logger.getLogger(Existencias.class.getName()).log(Level.SEVERE, null, ex);    
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No tiene datos para exportar", "Advertencia", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

// función que obtiene el formato del JDate Chooser y lo formatea para poder ingresarlo a la Base de datos.
    public static String formatoFecha(JDateChooser jDatefecha) {
        String fecha = "";
        try {
            String dia = Integer.toString(jDatefecha.getCalendar().get(Calendar.DAY_OF_MONTH));
            String mes = Integer.toString(jDatefecha.getCalendar().get(Calendar.MONTH) + 1);
            String year = Integer.toString(jDatefecha.getCalendar().get(Calendar.YEAR));
            fecha = (year + "-" + mes + "-" + dia);
            return fecha;
        } catch (Exception e) {
            System.out.println("Hubo un error formateando fecha");
        }
        return fecha;
    }

}
